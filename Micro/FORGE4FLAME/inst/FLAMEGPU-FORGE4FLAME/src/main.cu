#include <unistd.h> 
#include <fcntl.h> 

#include "model_functions.h"
#include "autogenerated_defines.h"

using namespace std;
using namespace flamegpu;

int main(int argc, const char ** argv) {
    ModelDescription model("FLAMEGPU2 Agent-Based Model");

    define_environment(model);
    
    define_pedestrian_messages(model);
    define_room_messages(model);
    
    define_pedestrian(model);
    define_room(model);

    define_layers(model);

    string filename = "results/" + string(argv[argc-1]) + "/simulation.csv";
    int fd = open(filename.c_str(), O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR);
    dup2(fd, fileno(stdout));
    fflush(stdout);

    argv[argc-1] = NULL;
    argc--;

#ifdef ENSEMBLE
    // Create a CUDAEnsemble
    CUDAEnsemble ensemble(model);
    
    // Handle any runtime args
    ensemble.initialise(argc, argv);

    RunPlanVector rpv = io::JSONRunPlanReader::load("resources/run_plan_vector.json", model);

    // Execute the simulation
    ensemble.simulate(rpv);
#else
    // Create the simulation
    CUDASimulation simulation(model, argc, argv);

    // Create visualisation if enabled
#ifdef FLAMEGPU_VISUALISATION
    visualiser::ModelVis visualiser = simulation.getVisualisation();
    
    define_visualisation(visualiser);     

    visualiser.activate();
#endif
    // Execute the simulation
    simulation.simulate();

#ifdef FLAMEGPU_VISUALISATION
    visualiser.join();
#endif

#endif

    // Ensure profiling / memcheck work correctly
    util::cleanup();

    return EXIT_SUCCESS;
}
